// Generated by view binder compiler. Do not edit!
package com.example.petreminder.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import com.example.petreminder.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class EventListItemBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final CardView eventListItemCardView;

  @NonNull
  public final TextView eventListItemDetail;

  @NonNull
  public final TextView eventListItemName;

  @NonNull
  public final TextView eventListItemStartDate;

  private EventListItemBinding(@NonNull LinearLayout rootView,
      @NonNull CardView eventListItemCardView, @NonNull TextView eventListItemDetail,
      @NonNull TextView eventListItemName, @NonNull TextView eventListItemStartDate) {
    this.rootView = rootView;
    this.eventListItemCardView = eventListItemCardView;
    this.eventListItemDetail = eventListItemDetail;
    this.eventListItemName = eventListItemName;
    this.eventListItemStartDate = eventListItemStartDate;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static EventListItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static EventListItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.event_list_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static EventListItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.event_list_item_card_view;
      CardView eventListItemCardView = rootView.findViewById(id);
      if (eventListItemCardView == null) {
        break missingId;
      }

      id = R.id.event_list_item_detail;
      TextView eventListItemDetail = rootView.findViewById(id);
      if (eventListItemDetail == null) {
        break missingId;
      }

      id = R.id.event_list_item_name;
      TextView eventListItemName = rootView.findViewById(id);
      if (eventListItemName == null) {
        break missingId;
      }

      id = R.id.event_list_item_start_date;
      TextView eventListItemStartDate = rootView.findViewById(id);
      if (eventListItemStartDate == null) {
        break missingId;
      }

      return new EventListItemBinding((LinearLayout) rootView, eventListItemCardView,
          eventListItemDetail, eventListItemName, eventListItemStartDate);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
